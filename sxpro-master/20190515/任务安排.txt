1.前端  数据库  数据交互（servlet 框架）

2.行业写代码  

前台 后台  运维  企业项目不可缺少

前端  java，c++，python 支撑业务逻辑   运维(项目上线之后)

JAVA体系

项目  无非就是完成一些功能  让人使用

上手快 （拷模板 不可以的）

前端 （html+js+jquery+ajax） 运用的产物（前端框架  前端库）
Vue,easyui  减少成本  

归根到底---》数据的流动性  数据流动性产生消耗  （减少消耗）   重构

时间换空间  空间换时间


后端  java  完成数据流动性的情况下----》我们要去消耗

有哪些方案 和  策略 值得你去尝试

--------------------------------------------------------------
运用一些新的技术 ，新的领域方向 不断解决数据流动的问题

java  1.设计模式  2.拿我学到技术来衡量我是不是很优秀 每一个框架所带来的思想是在变革 3.阅读量代表你所看到的思想有多少

-------------------------------------------------------
前端传递数据给后端做逻辑处理（决定是否需要持久化到物理介质当中）
（MVC模式） （规则是内存数据通电就存在，断电就消失）
--------------------------------------------------------目的
希望你能够思维和自律  （适应团队生存）


-----------------------------------------------------------------------------------------------------------------
git +  jk（持续集成）

1.你们要使用git进行项目的托管

2.svn 和 git 项目托管工具 （写的代码是不是要找地方放） 仓库  ----git仓库 --文件夹  ----》文件夹只有一个项目在里面也有可能有多个项目

每个负责的不同的功能（你的代码和他人的代码是没有关系），但是你们的功能之间会存在共通的数据交互（你们可能需要共同修改（使用）同一部分的局部代码）

SVN +  git
svn  集中式仓库  （最好的只有一个仓库）=====>中央式仓库
git  分布式仓库   (最好是人人都有一个仓库)  ======》人人都能当家做主

--------------------------使用全部都使用命令的方式

1.windows 安装git环境
2.组为单位  申请账号github账号  
3.如何成员共同访问同一个仓库 (使用账户和密码 或者密钥的方式)
4.如何往仓库提交文件（一个是往本地提交然后才是往远程仓库上面提交）  add  comit  push  pull=抓取+合并    首先要做pull 后  push
5.假定只有一个人允许提交，其他人如何从远程仓库中去下载仓库中的文件   git clone的命令
6.git里面有一个概念叫做分支 （每个人可以在不同的分支做事情）如何创建，如何删除分支，如何合并分支 （命令方式）brach
7.如何协调文件的内容管理（如何通过git进行代码的多人协作） 

-------------------------环境要求
1.JDK 1.8  
2.eclipse 中文编码调整为UTF-8
3.额外的（tomcat8.0解压版  中文编码调整为UTF-8）
4.mysql5.6-5.7  (1.解压版的工具 2.把mysql注册到windows服务中 3.中文编码调整为UTF-8) 
--------------------任务时长（20190515 15:00至17:15)

--------------------------git如何进行多人协作  （暂时忽略文件冲突）

一.大家都拥有同一个仓库的使用权 (仓库有发生变化的时候)  你要做的事情先pull = 抓取+合并远程仓库文件内容  然后在push



二.git clone / git pull /  pull request  （多人协作） （提高代码提交的质量）

1.组长搭建文件 使用add  +  commit  提交到自己的本地仓库   并且推送到自己的远程仓库 （第一次）、

2.组员通过fork克隆到自己的远程仓库,git clone的命令把项目克隆到本地当中，如果写了代码之后 提交自己的本地仓库并且推送你自己的远程仓库上面


3.组员就需要把刚才远程的仓库的代码发起pull request 推送给组长的远程仓库 


4. 组长要去查看pull request （git clone写的东西 clone 到本地其他分支上面）（看他的功能是否满足标准）

4.1 同意代码合并  gie merge 本地分支的代码合并到自己的master  4.2  直接在远程仓库上面pull request列表上面查看变化，确定是否同意

5.组员如果请求已经同意之后，通过fork克隆到自己的远程仓库 ，git pull 的命令 把自己远程仓库最新的代码 抓取并合并到本地仓库上面 继续接着写你的代码


------建立在一个项目很少有可能2个人写同一个功能









